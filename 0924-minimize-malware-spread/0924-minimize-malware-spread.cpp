class Solution {
    unordered_map<int, int> Root;
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n= graph.size();
        for(int i = 0; i < n; ++i) Root[i] = i;
        for(int i = 0; i < n; ++i)
            for(int j = 0; j < n; ++j) {
                if(i == j) continue;
                if(graph[i][j] == 0) continue;
                if(find(i) != find(j)) uni(i, j);
            }
        unordered_map<int, vector<int>> children;
        for(int i = 0; i < n; ++i) {
            Root[i] = find(i);
            children[Root[i]].push_back(i);
        }
        set<int> Set(initial.begin(), initial.end());
        
        int res = -1;
        int maxGroup = 0;
        
        for(auto a : children) {
            int count = 0;
            int candidate = -1;
            for(int b : a.second) {
                if(Set.find(b) != Set.end()) {
                    ++count;
                    candidate = b;
                }
                if(count > 1) break;
            }

            if (count==1 && (a.second.size()>maxGroup || a.second.size()==maxGroup && candidate<res))
            {
                maxGroup = a.second.size();
                res = candidate;
            }
        }
        
        if(res != -1) return res;
        return *Set.begin();
        
        
    }
    
    int find(int x) {
        if(Root[x] != x) Root[x] = find(Root[x]);
        return Root[x];
    }
    
    void uni(int x, int y) {
        x = Root[x]; y = Root[y];
        if(x < y) Root[y] = x;
        else Root[x] = y;
    }
};